<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:pro="http://www.liquibase.org/xml/ns/pro"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
                        http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.1.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd">
    <changeSet id="1" author="Maheshkumar">
        <sql>
            CREATE TYPE public.USER_ROLES AS ENUM ('BUSINESS', 'CUSTOMER');
        </sql>
        <sql>
            CREATE TABLE public.roles (
                id bigserial NOT NULL,
                role_name public.USER_ROLES NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_roles PRIMARY KEY (id),
                CONSTRAINT roles_role_name_unqiue UNIQUE (role_name)
            );
        </sql>
        <sql>
            INSERT INTO public.roles (role_name)
            VALUES ('BUSINESS'), ('CUSTOMER');
        </sql>
    </changeSet>
    <changeSet id="2" author="Maheshkumar">
        <sql>
            CREATE TABLE public.users (
                id bigserial NOT NULL,
                role_id bigint NOT NULL,
                name varchar(75) NOT NULL,
                email varchar(100) NOT NULL,
                mobile_no varchar(20) NOT NULL,
                password_hash varchar(250) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_users PRIMARY KEY (id),
                CONSTRAINT fk_users_role_id FOREIGN KEY (role_id) REFERENCES public.roles(id),
                CONSTRAINT users_email_unique UNIQUE (email),
                CONSTRAINT users_mobile_no_unique UNIQUE (mobile_no)
            );
        </sql>
    </changeSet>
    <changeSet id="3" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN is_email_verified boolean NOT NULL DEFAULT false;
        </sql>
    </changeSet>
    <changeSet id="4" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN is_mobile_verified boolean NOT NULL DEFAULT false;
        </sql>
    </changeSet>
    <changeSet id="5" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN is_totp_enabled boolean NOT NULL DEFAULT false;
        </sql>
    </changeSet>
    <changeSet id="6" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN totp_identity varchar(100) NOT NULL DEFAULT '';
        </sql>
    </changeSet>
    <changeSet id="7" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN totp_secret varchar(200) NOT NULL DEFAULT '';
        </sql>
    </changeSet>
    <changeSet id="8" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            DROP COLUMN totp_secret;
        </sql>
    </changeSet>
    <changeSet id="9" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN totp_secret varchar(200) NOT NULL DEFAULT '';
        </sql>
    </changeSet>
    <changeSet id="10" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            DROP COLUMN totp_identity;
        </sql>
    </changeSet>
    <changeSet id="11" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN last_password_reset_at timestamp NULL;
        </sql>
    </changeSet>
    <changeSet id="12" author="Maheshkumar">
        <sql>
            CREATE TABLE public.used_password_reset_tokens (
                id bigserial NOT NULL,
                token varchar(300) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_used_password_reset_tokens PRIMARY KEY (id)
            );
        </sql>
    </changeSet>
    <changeSet id="13" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN last_email_verification_sent_at timestamp NULL;
        </sql>
    </changeSet>
    <changeSet id="14" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            ADD COLUMN last_mobile_verification_sent_at timestamp NULL;
        </sql>
    </changeSet>
    <changeSet id="15" author="Maheshkumar">
        <sql>
            ALTER TABLE public.users
            RENAME COLUMN last_password_reset_at TO last_password_reset_sent_at;
        </sql>
    </changeSet>
    <changeSet id="16" author="Maheshkumar">
        <sql>
            CREATE TABLE public.email_verification_codes (
                id bigserial NOT NULL,
                user_id bigint NOT NULL,
                verification_code varchar(10) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_email_verification_codes PRIMARY KEY (id),
                CONSTRAINT fk_email_verification_codes_user_id FOREIGN KEY (user_id) REFERENCES public.users(id),
                CONSTRAINT email_verification_codes_user_id_unique UNIQUE (user_id)
            );
        </sql>
    </changeSet>
    <changeSet id="17" author="Maheshkumar">
        <sql>
            CREATE TABLE public.business_information (
                id bigserial NOT NULL,
                user_id bigint NOT NULL,
                description varchar(400) NULL,
                gst_no varchar(100) NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_business_information PRIMARY KEY (id),
                CONSTRAINT fk_business_information_user_id FOREIGN KEY (user_id) REFERENCES public.users(id)
            );
        </sql>
    </changeSet>
    <changeSet id="18" author="Maheshkumar">
        <sql>
            CREATE TABLE public.business_types (
                id bigserial NOT NULL,
                name varchar(30) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_business_types PRIMARY KEY (id),
                CONSTRAINT business_types_name_unique UNIQUE (name)
            );
        </sql>
    </changeSet>
    <changeSet id="19" author="Maheshkumar">
        <sql>
            CREATE TABLE public.business_subtypes (
                id bigserial NOT NULL,
                business_type_id bigint NOT NULL,
                name varchar(30) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_business_subtypes PRIMARY KEY (id),
                CONSTRAINT fk_business_subtypes_business_type_id FOREIGN KEY (business_type_id) REFERENCES public.business_types(id),
                CONSTRAINT business_subtypes_name_unique UNIQUE (name)
            );
        </sql>
    </changeSet>
    <changeSet id="20" author="Maheshkumar">
        <sql>
            ALTER TABLE public.business_information
            ADD COLUMN business_subtype_id bigint NULL;
        </sql>
        <sql>
            ALTER TABLE public.business_information
            ADD CONSTRAINT fk_business_information_subtype_id FOREIGN KEY (business_subtype_id) REFERENCES public.business_subtypes(id);
        </sql>
    </changeSet>
    <changeSet id="21" author="Maheshkumar">
        <sql>
            INSERT INTO public.business_types (name)
            VALUES ('Product'), ('Service');
        </sql>
        <sql>
            INSERT INTO public.business_subtypes (name, business_type_id) VALUES 
            ('Hotel', 1),
            ('Vegetable Shop', 1),
            ('Grocery Shop', 1),
            ('Stationery Shop', 1),
            ('Mobile Service Center', 2),
            ('Electronic Service Center', 2),
            ('Vehicle Service Center', 2),
            ('Hostel Service', 2),
            ('PG Service', 2),
            ('Hall Service', 2),
            ('Rental House Service', 2);
        </sql>
    </changeSet>
    <changeSet id="22" author="Maheshkumar">
        <sql>
            CREATE TABLE public.business_items (
                id bigserial NOT NULL,
                user_id bigint NOT NULL,
                name varchar(100) NOT NULL,
                description varchar(200) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_business_items PRIMARY KEY (id),
                CONSTRAINT fk_business_items_user_id FOREIGN KEY (user_id) REFERENCES public.users(id)
            );
        </sql>
    </changeSet>
    <changeSet id="23" author="Maheshkumar">
        <sql>
            ALTER TABLE public.business_items
            ADD COLUMN price bigint NOT NULL DEFAULT 0;
        </sql>
        <sql>
            ALTER TABLE public.business_items
            ADD COLUMN is_available boolean NOT NULL DEFAULT false;
        </sql>
    </changeSet>
    <changeSet id="24" author="Maheshkumar">
        <sql>
            CREATE TYPE ticket_status AS ENUM ('NEW', 'IN_DISCUSSION', 'REJECTED', 'IN_PROGRESS', 'FULFILLED');
        </sql>
        <sql>
            CREATE TABLE public.tickets (
                id bigserial NOT NULL,
                status ticket_status NOT NULL,
                created_by bigint NOT NULL,
                created_for bigint NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_tickets PRIMARY KEY (id),
                CONSTRAINT fk_tickets_created_by FOREIGN KEY (created_by) REFERENCES public.users(id),
                CONSTRAINT fk_tickets_created_for FOREIGN KEY (created_for) REFERENCES public.users(id)
            );
        </sql>
        <sql>
            CREATE TABLE public.ticket_items (
                id bigserial NOT NULL,
                ticket_id bigint NOT NULL,
                item_name varchar(100) NOT NULL,
                item_requirement varchar(50) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_ticket_items PRIMARY KEY (id),
                CONSTRAINT fk_ticket_items_ticket_id FOREIGN KEY (ticket_id) REFERENCES public.tickets(id)
            );
        </sql>
        <sql>
            CREATE TABLE public.ticket_comments (
                id bigserial NOT NULL,
                ticket_id bigint NOT NULL,
                posted_by bigint NOT NULL,
                comment varchar(200) NOT NULL,
                created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT pk_ticket_comments PRIMARY KEY (id),
                CONSTRAINT fk_ticket_items_ticket_id FOREIGN KEY (ticket_id) REFERENCES public.tickets(id),
                CONSTRAINT fk_ticket_items_posted_by FOREIGN KEY (posted_by) REFERENCES public.users(id)
            );
        </sql>
    </changeSet>
</databaseChangeLog>